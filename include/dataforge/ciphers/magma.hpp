/*=============================================================================
    Copyright (c) 2023 Alexander Pototskiy

    Use, modification and distribution is subject to the Boost Software
    License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
==============================================================================*/
#pragma once

#include "../detail/quarks.hpp"

#include "defs.hpp"

namespace dataforge {

// default, id-tc26-gost-28147-param-Z
inline const unsigned char magma_default_sbox[8][16] =
{
    {12,4,6,2,10,5,11,9,14,8,13,7,0,3,15,1},
    {6,8,2,3,9,10,5,12,1,14,4,7,11,13,0,15},
    {11,3,5,8,2,15,10,13,14,1,7,4,12,9,6,0},
    {12,8,2,1,13,4,15,6,7,0,10,5,3,14,9,11},
    {7,15,5,10,8,1,6,13,0,9,3,14,11,4,2,12},
    {5,13,15,6,9,2,12,10,11,7,8,1,4,3,14,0},
    {8,14,2,5,6,9,1,12,15,4,11,0,13,10,3,7},
    {1,7,14,13,0,5,8,3,4,15,10,6,9,12,11,2}
};

inline const unsigned char magma_sbox_informational[8][16] =
{
	{ 10,  4,  5,  6,  8,  1,  3,  7, 13, 12, 14,  0,  9,  2, 11, 15},
	{  5, 15,  4,  0,  2, 13, 11,  9,  1,  7,  6,  3, 12, 14, 10,  8},
	{  7, 15, 12, 14,  9,  4,  1,  0,  3, 11,  5,  2,  6, 10,  8, 13},
	{  4, 10,  7, 12,  0, 15,  2,  8, 14,  1,  6,  5, 13, 11,  9,  3},
	{  7,  6,  4, 11,  9, 12,  2, 10,  1,  8,  0, 14, 15, 13,  3,  5},
	{  7,  6,  2,  4, 13,  9, 15,  0, 10,  1,  5, 11,  8, 14, 12,  3},
	{ 13, 14,  4,  1,  7,  0,  5, 10,  3, 12,  8, 15,  6,  2,  9, 11},
	{  1,  3, 10,  9,  5, 11,  4, 15,  8,  6,  7, 14, 13,  0,  2, 12}
};

// id-GostR3411-94-TestParamSet
inline const unsigned char magma_sbox_test[8][16] =
{
	{  4, 10, 9, 2, 13, 8, 0, 14, 6, 11, 1, 12, 7, 15, 5, 3},
	{ 14, 11,  4, 12,  6, 13, 15, 10,  2,  3,  8,  1,  0,  7,  5,  9 },
	{ 5,  8,  1, 13, 10,  3,  4,  2, 14, 15, 12,  7,  6,  0,  9, 11 },
	{ 7, 13, 10,  1,  0,  8,  9, 15, 14,  4,  6, 12, 11,  2,  5,  3 },
	{ 6, 12,  7,  1,  5, 15, 13,  8,  4, 10,  9, 14,  0,  3, 11,  2 },
	{ 4, 11, 10,  0,  7,  2,  1, 13,  3,  6,  8,  5,  9, 12, 15, 14 },
	{ 13, 11,  4,  1,  3, 15,  5,  9,  0, 10, 14,  7,  6,  8,  2, 12 },
	{ 1, 15, 13,  0,  5,  7, 10,  4,  9,  2,  3, 14,  6, 11,  8, 12 }
};

// id-Gost28147-89-CryptoPro-A-ParamSet
inline const unsigned char magma_sbox_CryptoPro_A[8][16] =
{
	{ 0x9,  0x6,  0x3,  0x2,  0x8,  0xB,  0x1,  0x7,  0xA,  0x4,  0xE,  0xF,  0xC,  0x0,  0xD,  0x5},
	{ 0x3,  0x7,  0xE,  0x9,  0x8,  0xA,  0xF,  0x0,  0x5,  0x2,  0x6,  0xC,  0xB,  0x4,  0xD,  0x1 },
	{ 0xE,  0x4,  0x6,  0x2,  0xB,  0x3,  0xD,  0x8,  0xC,  0xF,  0x5,  0xA,  0x0,  0x7,  0x1,  0x9 },
	{ 0xE,  0x7,  0xA,  0xC,  0xD,  0x1,  0x3,  0x9,  0x0,  0x2,  0xB,  0x4,  0xF,  0x8,  0x5,  0x6 },
	{ 0xB,  0x5,  0x1,  0x9,  0x8,  0xD,  0xF,  0x0,  0xE,  0x4,  0x2,  0x3,  0xC,  0x7,  0xA,  0x6 },
	{ 0x3,  0xA,  0xD,  0xC,  0x1,  0x2,  0x0,  0xB,  0x7,  0x5,  0x9,  0x4,  0x8,  0xF,  0xE,  0x6 },
	{ 0x1,  0xD,  0x2,  0x9,  0x7,  0xA,  0x6,  0x0,  0x8,  0xC,  0x4,  0x5,  0xF,  0x3,  0xB,  0xE },
	{ 0xB,  0xA,  0xF,  0x5,  0x0,  0xC,  0xE,  0x8,  0x6,  0x2,  0x3,  0x9,  0x1,  0x7,  0xD,  0x4 }
};

// id-Gost28147-89-CryptoPro-B-ParamSet
inline const unsigned char magma_sbox_CryptoPro_B[8][16] =
{
	{ 0x8,  0x4,  0xB,  0x1,  0x3,  0x5,  0x0,  0x9,  0x2,  0xE,  0xA,  0xC,  0xD,  0x6,  0x7,  0xF},
	{ 0x0,  0x1,  0x2,  0xA,  0x4,  0xD,  0x5,  0xC,  0x9,  0x7,  0x3,  0xF,  0xB,  0x8,  0x6,  0xE },
	{ 0xE,  0xC,  0x0,  0xA,  0x9,  0x2,  0xD,  0xB,  0x7,  0x5,  0x8,  0xF,  0x3,  0x6,  0x1,  0x4 },
	{ 0x7,  0x5,  0x0,  0xD,  0xB,  0x6,  0x1,  0x2,  0x3,  0xA,  0xC,  0xF,  0x4,  0xE,  0x9,  0x8 },
	{ 0x2,  0x7,  0xC,  0xF,  0x9,  0x5,  0xA,  0xB,  0x1,  0x4,  0x0,  0xD,  0x6,  0x8,  0xE,  0x3 },
	{ 0x8,  0x3,  0x2,  0x6,  0x4,  0xD,  0xE,  0xB,  0xC,  0x1,  0x7,  0xF,  0xA,  0x0,  0x9,  0x5 },
	{ 0x5,  0x2,  0xA,  0xB,  0x9,  0x1,  0xC,  0x3,  0x7,  0x4,  0xD,  0x0,  0x6,  0xF,  0x8,  0xE },
	{ 0x0,  0x4,  0xB,  0xE,  0x8,  0x3,  0x7,  0x1,  0xA,  0x2,  0x9,  0x6,  0xF,  0xD,  0x5,  0xC }
};

// id-Gost28147-89-CryptoPro-C-ParamSet
inline const unsigned char magma_sbox_CryptoPro_C[8][16] =
{
	{ 0x1,  0xB,  0xC,  0x2,  0x9,  0xD,  0x0,  0xF,  0x4,  0x5,  0x8,  0xE,  0xA,  0x7,  0x6,  0x3},
	{ 0x0,  0x1,  0x7,  0xD,  0xB,  0x4,  0x5,  0x2,  0x8,  0xE,  0xF,  0xC,  0x9,  0xA,  0x6,  0x3 },
	{ 0x8,  0x2,  0x5,  0x0,  0x4,  0x9,  0xF,  0xA,  0x3,  0x7,  0xC,  0xD,  0x6,  0xE,  0x1,  0xB },
	{ 0x3,  0x6,  0x0,  0x1,  0x5,  0xD,  0xA,  0x8,  0xB,  0x2,  0x9,  0x7,  0xE,  0xF,  0xC,  0x4 },
	{ 0x8,  0xD,  0xB,  0x0,  0x4,  0x5,  0x1,  0x2,  0x9,  0x3,  0xC,  0xE,  0x6,  0xF,  0xA,  0x7 },
	{ 0xC,  0x9,  0xB,  0x1,  0x8,  0xE,  0x2,  0x4,  0x7,  0x3,  0x6,  0x5,  0xA,  0x0,  0xF,  0xD },
	{ 0xA,  0x9,  0x6,  0x8,  0xD,  0xE,  0x2,  0x0,  0xF,  0x3,  0x5,  0xB,  0x4,  0x1,  0xC,  0x7 },
	{ 0x7,  0x4,  0x0,  0x5,  0xA,  0x2,  0xF,  0xE,  0xC,  0x6,  0x1,  0xB,  0xD,  0x9,  0x3,  0x8 }
};

// id-Gost28147-89-CryptoPro-D-ParamSet
inline const unsigned char magma_sbox_CryptoPro_D[8][16] =
{
	{ 0xF,  0xC,  0x2,  0xA,  0x6,  0x4,  0x5,  0x0,  0x7,  0x9,  0xE,  0xD,  0x1,  0xB,  0x8,  0x3},
	{ 0xB,  0x6,  0x3,  0x4,  0xC,  0xF,  0xE,  0x2,  0x7,  0xD,  0x8,  0x0,  0x5,  0xA,  0x9,  0x1 },
	{ 0x1,  0xC,  0xB,  0x0,  0xF,  0xE,  0x6,  0x5,  0xA,  0xD,  0x4,  0x8,  0x9,  0x3,  0x7,  0x2 },
	{ 0x1,  0x5,  0xE,  0xC,  0xA,  0x7,  0x0,  0xD,  0x6,  0x2,  0xB,  0x4,  0x9,  0x3,  0xF,  0x8 },
	{ 0x0,  0xC,  0x8,  0x9,  0xD,  0x2,  0xA,  0xB,  0x7,  0x3,  0x6,  0x5,  0x4,  0xE,  0xF,  0x1 },
	{ 0x8,  0x0,  0xF,  0x3,  0x2,  0x5,  0xE,  0xB,  0x1,  0xA,  0x4,  0x7,  0xC,  0x9,  0xD,  0x6 },
	{ 0x3,  0x0,  0x6,  0xF,  0x1,  0xE,  0x9,  0x2,  0xD,  0x8,  0xC,  0x4,  0xB,  0xA,  0x5,  0x7 },
	{ 0x1,  0xA,  0x6,  0x8,  0xF,  0xB,  0x0,  0x4,  0xC,  0x3,  0x5,  0x9,  0x7,  0xD,  0x2,  0xE }
};

inline const unsigned char magma_sbox_cental_bank_rf[8][16] =
{
	{ 0x4, 0xA, 0x9, 0x2, 0xD, 0x8, 0x0, 0xE, 0x6, 0xB, 0x1, 0xC, 0x7, 0xF, 0x5, 0x3 },
	{ 0xE, 0xB, 0x4, 0xC, 0x6, 0xD, 0xF, 0xA, 0x2, 0x3, 0x8, 0x1, 0x0, 0x7, 0x5, 0x9 },
	{ 0x5, 0x8, 0x1, 0xD, 0xA, 0x3, 0x4, 0x2, 0xE, 0xF, 0xC, 0x7, 0x6, 0x0, 0x9, 0xB },
	{ 0x7, 0xD, 0xA, 0x1, 0x0, 0x8, 0x9, 0xF, 0xE, 0x4, 0x6, 0xC, 0xB, 0x2, 0x5, 0x3 },
	{ 0x6, 0xC, 0x7, 0x1, 0x5, 0xF, 0xD, 0x8, 0x4, 0xA, 0x9, 0xE, 0x0, 0x3, 0xB, 0x2 },
	{ 0x4, 0xB, 0xA, 0x0, 0x7, 0x2, 0x1, 0xD, 0x3, 0x6, 0x8, 0x5, 0x9, 0xC, 0xF, 0xE },
	{ 0xD, 0xB, 0x4, 0x1, 0x3, 0xF, 0x5, 0x9, 0x0, 0xA, 0xE, 0x7, 0x6, 0x8, 0x2, 0xC },
	{ 0x1, 0xF, 0xD, 0x0, 0x5, 0x7, 0xA, 0x4, 0x9, 0x2, 0x3, 0xE, 0x6, 0xB, 0x8, 0xC }
};

// Endianness: big for ГОСТ 34.12-2018, little for ГОСТ 28147-89
template <std::endian Endianness, typename ErrorHandlerT = throw_error_handler>
struct magma_qrk : cvt_qrk<ErrorHandlerT>
{
    using cvt_qrk_t = cvt_qrk<ErrorHandlerT>;

    cbyte_span_t key;
    cbyte_span_t iv;
    padding_type pt;
    cipher_mode_type cmt;
    const unsigned char (&sbox)[8][16];

    template <SpanOfIntegrals<8> KT, SpanOfIntegrals<8> IVT = cbyte_span_t, typename ... EHArgTs>
    magma_qrk(
        KT key_val,
        cipher_mode_type cmt_val = cipher_mode_type::ECB,
        IVT iv_val = {},
        padding_type pt_val = padding_type::zero,
        const unsigned char (&sbox_val)[8][16] = magma_default_sbox,
        EHArgTs&& ... ehargs)
            : cvt_qrk_t{ std::forward<EHArgTs>(ehargs) ... }
            , key{ reinterpret_cast<const unsigned char*>(key_val.data()), key_val.size() }
            , iv{ reinterpret_cast<const unsigned char*>(iv_val.data()), iv_val.size() }
            , pt{ pt_val }
            , cmt{ cmt_val }
            , sbox{ sbox_val }
    {}
};

template <SpanConvertible KT, SpanConvertible IVT = cbyte_span_t>
auto magma(
    KT&& key,
    cipher_mode_type cmt = cipher_mode_type::ECB,
    IVT&& iv = {},
    padding_type pt = padding_type::zero,
	const unsigned char(&sbox)[8][16] = magma_default_sbox)
{
    return magma_qrk<std::endian::big>{ std::span{ key }, cmt, std::span{ iv }, pt, sbox };
}

}

#include "../detail/ciphers/magma.hpp"
#include "../detail/utility/basic_block_cipher.hpp"

namespace dataforge {

template <IntegralBasedQuark<8> FromQrkT, std::endian Endianness, typename ErrorHandlerT>
struct cvt_resolver<FromQrkT, magma_qrk<Endianness, ErrorHandlerT>>
{
    using type = generic_block_encrypter<shared_algorithm<basic_block_cipher<magma_cipher_type_factory<Endianness>>>, ErrorHandlerT>;
};

template <IntegralBasedQuark<8> DestQrkT, std::endian Endianness, typename ErrorHandlerT>
struct cvt_resolver<magma_qrk<Endianness, ErrorHandlerT>, DestQrkT>
{
    using type = generic_block_decrypter<shared_algorithm<basic_block_cipher<magma_cipher_type_factory<Endianness>>>, ErrorHandlerT>;
};

}
